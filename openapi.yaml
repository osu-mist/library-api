openapi: 3.0.0
info:
  title: Library API
  description: Get information about books and members of library at OSU.
  version: v1
  license:
    name: GNU Affero General Public License Version 3
    url: http://www.gnu.org/licenses/agpl-3.0.en.html
  contact:
    name: IS Data Architecture Team
    url: https://is.oregonstate.edu/data-architecture
    email: isdataarchitecture@oregonstate.edu
externalDocs:
  description: GitHub Repository
  url: https://github.com/osu-mist/library-api
servers:
  - url: https://api.oregonstate.edu/v1
security:
  - OAuth2:
      - full
paths:
  /books:
    get:
      summary: Retrieve a list of all books in the library.
      tags:
        - books
      description: Get all books
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
        - in: query
          name: filter[title]
          description: Search by book title
          required: false
          schema:
            type: string
        - in: query
          name: filter[author][fuzzy]
          description: Search by book author.
          required: false
          schema:
            type: string
        - in: query
          name: filter[publicationYear]
          description: Filter books published on a specific year.
          required: false
          schema:
            type: integer
            format: int32
            pattern: ^\d{4}$
        - in: query
          name: filter[isbn]
          description: Filter books by International Standard Book Number (ISBN) for the book
          required: false
          schema:
            type: string
        - in: query
          name: filter[available]
          description: Filter books by availability (true/false).
          required: false
          schema:
            type: boolean
        - in: query
          name: filter[genre]
          description: Filter books by genre.
          required: false
          schema:
            type: string
        - in: query
          name: filter[description][fuzzy]
          description: Search by book description.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookSetResult'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Add a new book to library
      tags:
        - books
      operationId: postBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookPostBody'
      responses:
        '201':
          description: Book successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResult'
        '400':
          $ref: '#/components/responses/400'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  /books/{id}:
    get:
      summary: Retrieve details of a specific book.
      tags:
        - books
      description: Get book by unique identifier.
      operationId: getBookById
      parameters:
        - $ref: '#/components/parameters/bookId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Update details of a specific book.
      tags:
        - books
      description: Update a book by unique identifier.
      operationId: updateBookById
      parameters:
        - $ref: '#/components/parameters/bookId'
      requestBody:
        required: true
        description: patch body for a book
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookPatchBody'
      responses:
        '200':
          description: Details of the updated book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResult'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Remove a specific book from the library.
      tags:
        - books
      description: Remove a book by unique identifier.
      operationId: deleteBookById
      parameters:
        - $ref: '#/components/parameters/bookId'
      responses:
        '204':
          description: Book successfully deleted.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
          
  /members:
    get:
      summary: Retrieve a list of all library members.
      tags:
        - members
      description: Get all Members
      operationId: getMembers
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
        - in: query
          name: filter[firstName]
          description: Search by member first name.
          required: false
          schema:
            type: string
        - in: query
          name: filter[lastName]
          description: Search by member last name.
          required: false
          schema:
            type: string
        - in: query
          name: filter[email]
          description: Search by member email.
          required: false
          schema:
            type: string
        - in: query
          name: filter[address]
          description: Search by member address.
          required: false
          schema:
            type: string
        - in: query
          name: filter[phoneNumber]
          description: Search by member phone number.
          required: false
          schema:
            type: string
            pattern: '^\d{3}-\d{3}-\d{4}$'
        - in: query
          name: filter[membershipStatus]
          description: Filter members by membership status.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberSetResult'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Add a new member to the library.
      tags:
        - members
      operationId: postMember
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberPostBody'
      responses:
        '201':
          description: Member successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberResult'
        '400':
          $ref: '#/components/responses/400'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  /members/{id}:
    get:
      summary: Retrieve details of a specific member.
      tags:
        - members
      description: Get Member by unique identifier.
      operationId: getMemberById
      parameters:
        - $ref: '#/components/parameters/memberId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Update details of a specific member.
      tags:
        - members
      description: Update a member by unique identifier.
      operationId: updateMemberById
      parameters:
        - $ref: '#/components/parameters/memberId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberPatchBody'
      responses:
        '200':
          description: Details of the updated member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Remove a specific member of the library.
      tags:
        - members
      description: Remove a member by unique identifier.
      operationId: deleteMemberById
      parameters:
        - $ref: '#/components/parameters/memberId'
      responses:
        '204':
          description: Member successfully deleted.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /borrows:
    get:
      summary: Retrieve a list of all borrowed books from the library.
      tags:
        - borrows
      description: Get all Borrowed Books
      operationId: getBorrows
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
        - in: query
          name: filter[book_id]
          description: Search by book ID borrowed.
          required: false
          schema:
            type: string
        - in: query
          name: filter[member_id]
          description: Search by member ID who borrowed the book.
          required: false
          schema:
            type: string
        - in: query
          name: filter[borrow_date]
          description: Filter books borrowed on a specific date.
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: filter[due_date]
          description: Filter books due on a specific date.
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: filter[return_date]
          description: Filter books returned on a specific date.
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: filter[status]
          description: Filter books by borrowing status.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BorrowSetResult'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Borrow a book against a specific member.
      tags:
        - borrows
      operationId: postBorrowBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BorrowPostBody'
      responses:
        '201':
          description: The newly borrowed book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BorrowResult'
        '400':
          $ref: '#/components/responses/400'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  /borrows/{id}:
    get:
      summary: Retrieve details of a specific borrowed book.
      tags:
        - borrows
      description: Get a Borrowed Book by unique identifier.
      operationId: getBorrowBookById
      parameters:
        - $ref: '#/components/parameters/borrowId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BorrowResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Update details of a specific borrowed book.
      tags:
        - borrows
      description: Update a borrowed book transaction by a unique identifier.
      operationId: updateBorrowBookById
      parameters:
        - $ref: '#/components/parameters/borrowId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BorrowPatchBody'
      responses:
        '200':
          description: Details of the updated borrowed book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BorrowResult'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Remove a specific borrowed book.
      tags:
        - borrows
      description: Remove a borrowed book by unique identifier.
      operationId: deleteBorrowBookById
      parameters:
        - $ref: '#/components/parameters/borrowId'
      responses:
        '204':
          description: Borrowed book record successfully deleted.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.oregonstate.edu/oauth2/token
          scopes:
            full: Full access to the API
  parameters:
    pageNumber:
      name: page[number]
      in: query
      required: false
      description: Page number of results
      schema:
        type: integer
        minimum: 1
        default: 1
    pageSize:
      name: page[size]
      in: query
      required: false
      description: Number of results to return
      schema:
        type: integer
        minimum: 1
        maximum: 500
        default: 25
    bookId:
      name: id
      in: path
      description: Unique Book ID
      required: true
      schema:
        type: string
        pattern: '^[A-Za-z0-9-]+$'
    memberId:
      name: id
      in: path
      description: Unique Member ID
      required: true
      schema:
        type: string
        pattern: '^[A-Za-z0-9-]+$'
    borrowId:
      name: id
      in: path
      description: Unique Borrow ID
      required: true
      schema:
        type: string
        pattern: '^[A-Za-z0-9-]+$'
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
  schemas:
    BookId:
      type: string
      description: Book ID
      example: '26'
    BookType:
      type: string
      enum:
        - book
    BookAvailable:
      type: string
      nullable: false
      description: Availability of book (true/false).
      example: true
    MemberId:
      type: string
      description: Member ID
      example: '001'
    MemberType:
      type: string
      enum:
        - member
    MembershipStatus:
      type: string
      nullable: false
      description: Membership status of the member (active/suspended/expired).
      example: active
    BorrowId:
      type: string
      description: Borrow ID
      example: 'bo123'
    BorrowType:
      type: string
      enum:
        - borrow
    BorrowReturnDate:
      type: string
      format: date
      nullable: true
      description: Returned date of the book
      example: null
    BorrowStatus:
      type: string
      nullable: true
      description: Current borrow status of the book (ongoing/returned/overdue)
      example: ongoing
    BookPostBody:
      type: object
      required:
        - data
      additionalProperties: false
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          additionalProperties: false
          properties:
            type:
              $ref: '#/components/schemas/BookType'
            attributes:
              allOf:
                - $ref: '#/components/schemas/BookPostRequired'
                - $ref: '#/components/schemas/BookPostAttributes'
    BookPostRequired:
      type: object
      required:
        - title
        - author
        - publicationYear
        - genre
    BookPostAttributes:
      type: object
      additionalProperties: false
      properties:
        title:
          type: string
          nullable: false
          description: Title of book
          example: The Alchemist
        author:
          type: string
          nullable: false
          description: Author of book
          example: Paulo Coelho
        publicationYear:
          type: integer
          nullable: false
          description: Publication year of book
          pattern: ^\d{4}$
          example: 1988
        isbn:
          type: string
          nullable: true
          description: International Standard Book Number (ISBN) for the book
          example: 978-0061122415
        genre:
          type: string
          nullable: false
          description: Genre year of book
          example: Fiction
        description:
          type: string
          nullable: true
          description: Description or summary of book
          example: The Alchemist follows the journey of an Andalusian shepherd boy named Santiago...
    BookAttributes:
      allOf:
        - $ref: '#/components/schemas/BookPostAttributes'
        - type: object
          properties:
            available:
              $ref: '#/components/schemas/BookAvailable'
    BookResource:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/BookId'
        type:
          $ref: '#/components/schemas/BookType'
        links:
          $ref: '#/components/schemas/SelfLink'
        attributes:
          $ref: '#/components/schemas/BookAttributes'
    BookResult:
      properties:
        links:
            $ref: '#/components/schemas/SelfLink'
        data:
            $ref: '#/components/schemas/BookResource'
    BookSetResult:
      properties:
        links:
            $ref: '#/components/schemas/SelfLink'
        data:
          type: array
          items:
            $ref: '#/components/schemas/BookResource'
    BookPatchBody:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
          additionalProperties: false
          properties:
            id:
              $ref: '#/components/schemas/BookId'
            type:
              $ref: '#/components/schemas/BookType'
            attributes:
              $ref: '#/components/schemas/BookAttributes'
    MemberPostBody:
      type: object
      required:
        - data
      additionalProperties: false
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          additionalProperties: false
          properties:
            type:
              $ref: '#/components/schemas/MemberType'
            attributes:
              allOf:
                - $ref: '#/components/schemas/MemberPostRequired'
                - $ref: '#/components/schemas/MemberPostAttributes'
    MemberPostRequired:
      type: object
      required:
        - firstName
        - lastName
        - email
        - address
        - phoneNumber
    MemberPostAttributes:
      type: object
      properties:
        firstName:
          type: string
          nullable: false
          description: First name of member
          example: John
        lastName:
          type: string
          nullable: false
          description: Last name of member
          example: Doe
        email:
          type: string
          nullable: false
          description: Email of member
          example: john.doe@example.com
        address:
          type: string
          nullable: false
          description: Address of member
          example: 123 Main Street, Cityville
        phoneNumber:
          type: string
          pattern: '^\d{3}-\d{3}-\d{4}$'
          nullable: false
          description: Phone number of member
          example: 555-123-4567
    MemberAttributes:
      allOf:
        - $ref: '#/components/schemas/MemberPostAttributes'
        - type: object
          properties:
            membershipStatus:
              $ref: '#/components/schemas/MembershipStatus'
    MemberResource:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/MemberId'
        type:
          $ref: '#/components/schemas/MemberType'
        links:
          $ref: '#/components/schemas/SelfLink'
        attributes:
          $ref: '#/components/schemas/MemberAttributes'
    MemberResult:
      properties:
        links:
            $ref: '#/components/schemas/SelfLink'
        data:
            $ref: '#/components/schemas/MemberResource'
    MemberSetResult:
      properties:
        links:
            $ref: '#/components/schemas/SelfLink'
        data:
          type: array
          items:
            $ref: '#/components/schemas/MemberResource'
    MemberPatchBody:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
          additionalProperties: false
          properties:
            id:
              $ref: '#/components/schemas/MemberId'
            type:
              $ref: '#/components/schemas/MemberType'
            attributes:
              $ref: '#/components/schemas/MemberAttributes'
    BorrowSetResult:
      properties:
        links:
            $ref: '#/components/schemas/SelfLink'
        data:
          type: array
          items:
            $ref: '#/components/schemas/BorrowResource'
    BorrowResource:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/BorrowId'
        type:
          $ref: '#/components/schemas/BorrowType'
        links:
          $ref: '#/components/schemas/SelfLink'
        attributes:
          $ref: '#/components/schemas/BorrowAttributes'
    BorrowAttributes:
      allOf:
        - $ref: '#/components/schemas/BorrowPostAttributes'
        - type: object
          properties:
            returnDate:
              $ref: '#/components/schemas/BorrowReturnDate'
            status:
              $ref: '#/components/schemas/BorrowStatus'
    BorrowPostAttributes:
      type: object
      additionalProperties: false
      properties:
        bookId:
          $ref: '#/components/schemas/BookId'
        memberId:
          $ref: '#/components/schemas/MemberId'
        borrowDate:
          type: string
          format: date
          nullable: false
          description: Borrow date of the book
          example: 2023-06-30
        dueDate:
          type: string
          format: date
          nullable: false
          description: Due date for returning the book
          example: 2023-07-30
    BorrowPostBody:
      type: object
      required:
        - data
      additionalProperties: false
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          additionalProperties: false
          properties:
            type:
              $ref: '#/components/schemas/BorrowType'
            attributes:
              allOf:
                - $ref: '#/components/schemas/BorrowPostRequired'
                - $ref: '#/components/schemas/BorrowPostAttributes'
    BorrowPostRequired:
      type: object
      required:
        - bookId
        - memberId
        - borrowDate
        - dueDate
    BorrowResult:
      properties:
        links:
            $ref: '#/components/schemas/SelfLink'
        data:
            $ref: '#/components/schemas/BorrowResource'
    BorrowPatchBody:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
          additionalProperties: false
          properties:
            id:
              $ref: '#/components/schemas/BorrowId'
            type:
              $ref: '#/components/schemas/BorrowType'
            attributes:
              $ref: '#/components/schemas/BorrowAttributes'
    Meta:
      properties:
        totalResults:
          type: integer
          description: Total number of results
          example: 10
        totalPages:
          type: integer
          description: Total number of pages
          example: 10
        currentPageNumber:
          type: integer
          description: Page number of the returned results
          example: 1
        currentPageSize:
          type: integer
          description: Number of results per page
          example: 25
    SelfLink:
      properties:
        self:
          type: string
          format: uri
          description: Self-link of current resource
    PaginationLinks:
      properties:
        first:
          type: string
          format: uri
          description: The first page of data
        last:
          type: string
          format: uri
          description: The last page of data
        prev:
          type: string
          format: uri
          nullable: true
          description: The previous page of data
        next:
          type: string
          format: uri
          nullable: true
          description: The next page of data
    ErrorObject:
      properties:
        status:
          type: string
          description: HTTP status code
          example: '123'
        title:
          type: string
          description: A short, user readable summary of the error
          example: Not Found
        code:
          type: string
          description: An application-specific error code
          example: '1234'
        detail:
          type: string
          description: A long description of the error that may contain instance-specific
            details
        links:
          properties:
            about:
              type: string
              format: uri
              description: A link to further information about the error
              example: https://developer.oregonstate.edu/documentation/error-reference#1234
    ErrorResult:
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorObject'
