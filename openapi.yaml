openapi: 3.0.0
info:
  title: Library API
  description: Get information about books and members of library at OSU.
  version: v1
  license:
    name: GNU Affero General Public License Version 3
    url: http://www.gnu.org/licenses/agpl-3.0.en.html
  contact:
    name: IS Data Architecture Team
    url: https://is.oregonstate.edu/data-architecture
    email: isdataarchitecture@oregonstate.edu
externalDocs:
  description: GitHub Repository
  url: https://github.com/osu-mist/library-api
servers:
  - url: https://api.oregonstate.edu/v1
security:
  - OAuth2:
      - full
paths:
  /books:
    get:
      summary: Retrieve a list of all books in the library.
      tags:
        - books
      description: Get all books
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
        - in: query
          name: filter[title]
          description: Search by book title
          required: false
          schema:
            type: string
        - in: query
          name: filter[author]
          description: Search by book author.
          required: false
          schema:
            type: string
        - in: query
          name: filter[publication_year]
          description: Filter books published on a specific year.
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: filter[isbn]
          description: Filter books by International Standard Book Number (ISBN) for the book
          required: false
          schema:
            type: string
        - in: query
          name: filter[available]
          description: Filter books by availability (true/false).
          required: false
          schema:
            type: boolean
        - in: query
          name: filter[genre]
          description: Filter books by genre.
          required: false
          schema:
            type: string
        - in: query
          name: filter[description]
          description: Search by book description.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Add a new book to library
      tags:
        - books
      operationId: postBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBook'
      responses:
        '201':
          description: Book successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/400'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  /books/{id}:
    get:
      summary: Retrieve details of a specific book.
      tags:
        - books
      description: Get book by unique identifier.
      operationId: getBookById
      parameters:
        - name: id
          in: path
          description: Unique Book ID
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9-]+$'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
          
    patch:
      summary: Update details of a specific book.
      tags:
        - books
      description: Update a book by unique identifier.
      operationId: updateBookById
      parameters:
        - name: id
          in: path
          description: Unique Book ID
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9-]+$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBook'
      responses:
        '200':
          description: Details of the updated book.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Remove a specific book from the library.
      tags:
        - books
      description: Remove a book by unique identifier.
      operationId: deleteBookById
      parameters:
        - name: id
          in: path
          description: Unique Book ID
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9-]+$'
      responses:
        '204':
          description: Book successfully deleted.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
          
  /members:
    get:
      summary: Retrieve a list of all library members.
      tags:
        - members
      description: Get all Members
      operationId: getMembers
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
        - in: query
          name: filter[first_name]
          description: Search by member first name.
          required: false
          schema:
            type: string
        - in: query
          name: filter[last_name]
          description: Search by member last name.
          required: false
          schema:
            type: string
        - in: query
          name: filter[email]
          description: Search by member email.
          required: false
          schema:
            type: string
        - in: query
          name: filter[address]
          description: Search by member address.
          required: false
          schema:
            type: string
        - in: query
          name: filter[phone_number]
          description: Search by member phone number.
          required: false
          schema:
            type: string
        - in: query
          name: filter[membership_status]
          description: Filter members by membership status.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Add a new member to the library.
      tags:
        - members
      operationId: postMember
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMember'
      responses:
        '201':
          description: Member successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '400':
          $ref: '#/components/responses/400'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  /members/{id}:
    get:
      summary: Retrieve details of a specific member.
      tags:
        - members
      description: Get Member by unique identifier.
      operationId: getMemberById
      parameters:
        - name: id
          in: path
          description: Unique Member ID
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9-]+$'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
          
    patch:
      summary: Update details of a specific member.
      tags:
        - members
      description: Update a member by unique identifier.
      operationId: updateMemberById
      parameters:
        - name: id
          in: path
          description: Unique Member ID
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9-]+$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMember'
      responses:
        '200':
          description: Details of the updated member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Remove a specific member of the library.
      tags:
        - members
      description: Remove a member by unique identifier.
      operationId: deleteMemberById
      parameters:
        - name: id
          in: path
          description: Unique Member ID
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9-]+$'
      responses:
        '204':
          description: Member successfully deleted.
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.oregonstate.edu/oauth2/token
          scopes:
            full: Full access to the API
  parameters:
    pageNumber:
      name: page[number]
      in: query
      required: false
      description: Page number of results
      schema:
        type: integer
        minimum: 1
        default: 1
    pageSize:
      name: page[size]
      in: query
      required: false
      description: Number of results to return
      schema:
        type: integer
        minimum: 1
        maximum: 500
        default: 25
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
  schemas:
    Book:
      type: object
      properties:
        book_id:
          type: string
        title:
          type: string
        author:
          type: string
        publication_year:
          type: integer
        isbn:
          type: string
        available:
          type: boolean
        genre:
          type: string
        description:
          type: string
          
    NewBook:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        publication_year:
          type: integer
        isbn:
          type: string
        genre:
          type: string
        description:
          type: string
          
    Member:
      type: object
      properties:
        member_id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        address:
          type: string
        phone_number:
          type: string
        membership_status:
          type: string
          
    NewMember:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        address:
          type: string
        phone_number:
          type: string
          
    Meta:
      properties:
        totalResults:
          type: integer
          description: Total number of results
          example: 10
        totalPages:
          type: integer
          description: Total number of pages
          example: 10
        currentPageNumber:
          type: integer
          description: Page number of the returned results
          example: 1
        currentPageSize:
          type: integer
          description: Number of results per page
          example: 25
    SelfLink:
      properties:
        self:
          type: string
          format: uri
          description: Self-link of current resource
    PaginationLinks:
      properties:
        first:
          type: string
          format: uri
          description: The first page of data
        last:
          type: string
          format: uri
          description: The last page of data
        prev:
          type: string
          format: uri
          nullable: true
          description: The previous page of data
        next:
          type: string
          format: uri
          nullable: true
          description: The next page of data
    PetResource:
      properties:
        id:
          type: string
          description: A unique ID of pet
        type:
          type: string
          enum:
            - pet
        links:
          $ref: '#/components/schemas/SelfLink'
        attributes:
          properties:
            name:
              type: string
              description: Name of pet
              example: Hedwig
            owner:
              type: string
              description: Name of owner
              example: Harry Potter
            species:
              type: string
              description: Species of pet
              example: Owl
            age:
              type: number
              format: integer
              description: Age of pet
              example: 5
            size:
              type: object
              properties:
                length:
                  type: number
                  format: float
                  description: Length in inches
                  example: 18
                chest:
                  type: number
                  format: float
                  description: Chest size in inches
                  example: 16
                weight:
                  type: number
                  format: float
                  description: Weight in pounds
                  example: 8
    PetPostBody:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              $ref: '#/components/schemas/PetResource/properties/type'
            attributes:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/PetResource/properties/attributes/properties/name'
                owner:
                  $ref: '#/components/schemas/PetResource/properties/attributes/properties/owner'
                species:
                  $ref: '#/components/schemas/PetResource/properties/attributes/properties/species'
                age:
                  $ref: '#/components/schemas/PetResource/properties/attributes/properties/age'
                size:
                  $ref: '#/components/schemas/PetResource/properties/attributes/properties/size'
              required:
                - name
                - owner
                - species
              additionalProperties: false
          required:
            - type
            - attributes
          additionalProperties: false
      required:
       - data
      additionalProperties: false
    PetResult:
      properties:
        links:
          $ref: '#/components/schemas/SelfLink'
        data:
          $ref: '#/components/schemas/PetResource'
    PetSetResult:
      properties:
        links:
          allOf:
            - $ref: '#/components/schemas/SelfLink'
            - $ref: '#/components/schemas/PaginationLinks'
        meta:
          $ref: '#/components/schemas/Meta'
        data:
          type: array
          items:
            $ref: '#/components/schemas/PetResource'
    ErrorObject:
      properties:
        status:
          type: string
          description: HTTP status code
          example: '123'
        title:
          type: string
          description: A short, user readable summary of the error
          example: Not Found
        code:
          type: string
          description: An application-specific error code
          example: '1234'
        detail:
          type: string
          description: A long description of the error that may contain instance-specific
            details
        links:
          properties:
            about:
              type: string
              format: uri
              description: A link to further information about the error
              example: https://developer.oregonstate.edu/documentation/error-reference#1234
    ErrorResult:
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorObject'
